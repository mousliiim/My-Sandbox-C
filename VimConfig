" **************************************************************************** "
"                                                                              "
"                                                         :::      ::::::::    "
"    .vimrc                                             :+:      :+:    :+:    "
"                                                     +:+ +:+         +:+      "
"    By: mmourdal <mmourdal@student.42.fr>          +#+  +:+       +#+         "
"                                                 +#+#+#+#+#+   +#+            "
"    Created: 2022/10/16 18:54:26 by mmourdal          #+#    #+#              "
"    Updated: 2022/10/16 23:56:12 by mmourdal         ###   ########.fr        "
"                                                                              "
" **************************************************************************** "

"VimCake version: 0.2.1-pre

call plug#begin('~/.vim/plugged')
Plug 'aben20807/vim-runner'
Plug 'alexandregv/norminette-vim'
Plug 'lilydjwg/colorizer'
Plug 'scrooloose/nerdtree'
Plug 'vim-syntastic/syntastic'
Plug 'sirver/ultisnips'
Plug 'pbondoer/vim-42header'
Plug 'vim-airline/vim-airline'
Plug 'crusoexia/vim-monokai'
Plug 'honza/vim-snippets'
Plug '907th/vim-auto-save'
call plug#end()

"<Plugins config>
filetype plugin on
let g:airline_theme='dark'
let g:colorizer_maxlines = 512
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <C-n> :NERDTreeToggle<CR>
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"
nmap <F2> :Stdheader<CR>
let g:hdr42user="mmourdal"
let g:hdr42mail="mmourdal@student.42.fr"

"<User Interface>
syntax on " Enable syntax processing
color monokai " Change color scheme
set mouse=a "Enable mouse
set number "Show line numbers
set showcmd "Show the last command in bottom bar
set wildmenu "Visual autocompletion for command menu
set showmatch "Highlight matching [{()}]
set ruler "Always show cursor position
set list "Enable lists
set listchars=tab:\>\- "Show tabs
set foldmethod=syntax "Fold based on indention levels
set foldcolumn=1 "Enable mouse to open and close folds
set nofoldenable "Open files without closed folds
set confirm "Display a confirmation dialog when closing an unsaved file
"Toggle fold/unfold all folds
noremap <F3> :call FoldToggle()<CR>

"<Indent>
filetype indent on "Enable indentation rules that are file-type specific
set tabstop=4 "Indent using four spaces
set softtabstop=4 "Number of spaces in <Tab>
set shiftwidth=4 "When shifting, indent using four spaces
set autoindent "New lines inherit the indentation of previous lines
set smarttab "Insert “tabstop” number of spaces with the “tab” key
set smartindent "Do smart autoindenting when starting a new line
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
inoremap ' ''<Left>
inoremap " ""<Left>

"<Search>
set hlsearch "Search highlighting
set incsearch "Incremental search that shows partial matches
set smartcase "Automatically switch search to case-sensitive when search query contains an uppercase letter

"<Miscellaneous>
set backupdir=~/.cache/vim "Directory to store backup files
set dir=~/.cache/vim "Directory to store swap files
set history=256 "Stack size
set tabpagemax=64 "Maximum number of files that can be opened with vim -p
set lazyredraw "Don’t update screen during macro and script execution

let $fold=1
function FoldToggle()
	if $fold==0
		:exe "normal zR"
		let $fold=1
	else
		:exe "normal zM"
		let $fold=0
	endif
endf

" Enable norminette-vim (and gcc)
let g:syntastic_c_checkers = ['norminette', 'gcc']
let g:syntastic_aggregate_errors = 1

" Set the path to norminette (do no set if using norminette of 42 mac)
let g:syntastic_c_norminette_exec = 'norminette'

" Support headers (.h)
let g:c_syntax_for_h = 1
let g:syntastic_c_include_dirs = ['include', '../include', '../../include', 'libft', '../libft/include', '../../libft/include']

" Pass custom arguments to norminette (this one ignores 42header)
let g:syntastic_c_norminette_args = '-R CheckTopCommentHeader'

" Check errors when opening a file (disable to speed up startup time)
let g:syntastic_check_on_open = 1

" Enable error list
let g:syntastic_always_populate_loc_list = 1

" Automatically open error list
let g:syntastic_auto_loc_list = 1

" Skip check when closing
let g:syntastic_check_on_wq = 0

"                ## GCC IN VIM ###                   "
" Use <F5> to compile and run code by default.
" Feel free to change mapping you like.
" Print a timestamp on the top of output by default.
let g:runner_run_key = "&&"
